@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@model MicroVerse.ViewModels.PostViewModel


<!-- POST BOX -->

<div class="post-containter">

    <!-- Post header -->
    <div class="post-header">

        <!-- Author information -->
        <a class="post-author" asp-controller="Home" asp-action="Profile" asp-route-id="@Model.Username">
            <img class="profile-picture" src="@Model.AuthorImage" height="25" width="25" />
            @Model.DisplayedName
        </a>

        <!-- Post time -->
        <p class="post-time">@Model.CreatedAt</p>

        <!-- post action section-->
        <div class="post-actions">

            <!-- Actions for signed in users-->
            @if (SignInManager.IsSignedIn(User))
            {


                <!-- Voting buttons depending on voting status-->
                @if (Model.VoteByUser == Vote.Votes.Undefined)
                {
                    <form method="post" action="/api/Post/Up/@User.Identity?.Name/@Model.Id">
                        <button type="submit" onclick="refreshPage();"><i class="fa-solid fa-circle-up"></i> @Model.Upvotes </button>
                    </form>
                    <form method="post" action="/api/Post/Down/@User.Identity?.Name/@Model.Id">
                        <button type="submit" onclick="refreshPage();"><i class="fa-solid fa-circle-down"></i> @Model.Downvotes</button>
                    </form>
                } else if(Model.VoteByUser == Vote.Votes.Down)
                {
                    <button disabled type="submit" onclick="refreshPage();" class="unactive"><i class="fa-solid fa-circle-up unactive"></i> @Model.Upvotes </button>
                        <button disabled type="submit" onclick="refreshPage();" class="btn-downvoted"><i class="fa-solid fa-circle-down"></i> @Model.Downvotes</button>
                }
                else if (Model.VoteByUser == Vote.Votes.Up)
                {
                    <button disabled type="submit" onclick="refreshPage();" class="btn-upvoted"><i class="fa-solid fa-circle-up"></i> @Model.Upvotes </button>
                    <button disabled type="submit" onclick="refreshPage();" class="unactive"><i class="fa-solid fa-circle-down unactive"></i> @Model.Downvotes</button>
                }

                <!-- Flagging button depending on post status-->
                @if(Model.Status==0)
                {
                    <form method="post" action="/api/Post/Flag/@Model.Id">
                        <button type="submit" onclick="refreshPage()"><i class="fa-solid fa-flag"></i>flag</button>
                    </form>
                } else if(Model.Status==1)
                {
                    <!-- option to "unflag" for moderator an admin only -->
                    @if (User.IsInRole("Moderator") || User.IsInRole("Admin"))
                    {
                        <form method="post" action="/api/Post/Unflag/@Model.Id">
                            <button type="submit" onclick="refreshPage()" class="flagged"><i class="fa-solid fa-font-awesome"></i>unflag</button>
                        </form>
                    } else
                    {
                        <div class="info"><p><i class="fa-solid fa-font-awesome"></i> This post is already flagged and will be reviewed by our moderators</p></div>
                    }
                }
            } else
            {
            
                <!-- disabled voting buttons for users not logged in -->
                <button disabled><i class="fa-solid fa-circle-up"></i> @Model.Upvotes </button>
                <button disabled><i class="fa-solid fa-circle-down"></i> @Model.Downvotes</button>
            }
        </div>
    </div>
    <hr>
    
    <!-- Post content -->
    <div class="post-body">
        @Model.Body
    </div>

    <!-- Delete button; For moderator, admin and author only-->
    @if (SignInManager.IsSignedIn(User))
    {

        <hr>
        <div class="post-react">
            <form method="post" asp-controller="Post" asp-action="React">
                <input type="text" name="text" maxlength="280" placeholder="Type here...">
                <input type="hidden" name="postId" value="@Model.Id" />
                <button type="submit">><i class="fa-solid fa-retweet"></i> React </button>
            </form>
        </div>
        @if (User.IsInRole("Moderator") || User.IsInRole("Admin") || Model.Username == @User.Identity?.Name)
        {

            <form method="post" asp-controller="Post" asp-action="DeletePost" asp-route-id="@Model.Id" style="position: relative; top: 10px; right: 10px;">
                <button type="submit" class="delete-button">Delete</button>
            </form>
        }
    }


    <!-- Potentially referenced post; recursive -->
    @if(Model.ReactsTo!=null)
    {
        <hr>
        <p>This is a reaction to: </p>
        <partial name="_PostPartial" for="@Model.ReactsTo" />
    }
</div>