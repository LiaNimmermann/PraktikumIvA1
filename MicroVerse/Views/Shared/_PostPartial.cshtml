@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@model MicroVerse.ViewModels.PostViewModel


<div class="post-containter">
    <div class="post-header">
        <a class="post-author" asp-controller="Home" asp-action="Profile" asp-route-id="@Model.Username">
            <img class="profile-picture" src="https://picsum.photos/200/200" height="25" width="25" />
            @Model.DisplayedName
        </a>
        <div class="post-actions">
            @if (Model.VoteByUser == Vote.Votes.Undefined)
            {
                <form method="post" action="/api/Post/Up/@User.Identity?.Name/@Model.Id">
                    @*<input type="hidden" name="user" value="@User.Identity?.Name" />*@
                    @*<input type="hidden" name="id" value="@Model.Id" />*@
                    <button type="submit" onclick="refreshPage();"><i class="fa-solid fa-circle-up"></i> @Model.Upvotes </button>
                </form>
                <form method="post" action="/api/Post/Down/@User.Identity?.Name/@Model.Id">
                    @*<input type="hidden" name="user" value="@User.Identity?.Name" />*@
                    @*<input type="hidden" name="id" value="@Model.Id" />*@
                    <button type="submit" onclick="refreshPage();"><i class="fa-solid fa-circle-down"></i> @Model.Downvotes</button>
                </form>
            } else if(Model.VoteByUser == Vote.Votes.Down)
            {
                <button disabled type="submit" onclick="refreshPage();" class="unactive"><i class="fa-solid fa-circle-up unactive"></i> @Model.Upvotes </button>
                    <button disabled type="submit" onclick="refreshPage();" class="btn-downvoted"><i class="fa-solid fa-circle-down"></i> @Model.Downvotes</button>
            }
            else if (Model.VoteByUser == Vote.Votes.Up)
            {
                <button disabled type="submit" onclick="refreshPage();" class="btn-upvoted"><i class="fa-solid fa-circle-up"></i> @Model.Upvotes </button>
                <button disabled type="submit" onclick="refreshPage();" class="unactive"><i class="fa-solid fa-circle-down unactive"></i> @Model.Downvotes</button>
            }

            <a href="#"><i class="fa-solid fa-flag"></i></a>
        </div>
    </div>
    <hr>
    <div class="post-body">
        @Model.Body
    </div>
    @if (User.Identity.IsAuthenticated)
    {
       
    }
    @if (SignInManager.IsSignedIn(User))
    {

        <hr>
        <div class="post-react">
            <form method="post" asp-controller="Post" asp-action="React">
                <input type="text" name="text" maxlength="280" placeholder="Type here...">
                <input type="hidden" name="postId" value="@Model.Id" />
                <button type="submit">><i class="fa-solid fa-retweet"></i> React </button>
            </form>
        </div>
        @if (User.IsInRole("Moderator") || User.IsInRole("Admin"))
        {

            <form method="post" asp-controller="Post" asp-action="DeletePost" asp-route-id="@Model.Id" style="position: relative; top: 10px; right: 10px;">
                <button type="submit" class="delete-button">Delete</button>
            </form>
        }



        
    }
    @if(Model.ReactsTo!=null)
    {

        <hr>
        <p>This is a reaction to: </p>
        <partial name="_PostPartial" for="@Model.ReactsTo" />
    }
</div>